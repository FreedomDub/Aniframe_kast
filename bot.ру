import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
AGE, ROLE, WORK_SAMPLES, TG_LINK = range(4)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!)
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
ADMIN_CHAT_ID = "–í–ê–®_TELEGRAM_ID"  # –ü–æ–ª—É—á–∏—Ç–µ —É @userinfobot

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
role_keyboard = [
    ['–ü–µ—Ä–µ–≤–æ–¥ —è–ø–æ–Ω', '–ü–µ—Ä–µ–≤–æ–¥ –∞–Ω–≥–ª'],
    ['–ú–æ–Ω—Ç–∞–∂–µ—Ä', '–ó–≤—É–∫–æ–º–æ–Ω—Ç–∞–∂–µ—Ä'],
    ['–ê–∫—Ç—ë—Ä –æ–∑–≤—É—á–∫–∏', '–ê–∫—Ç—Ä–∏—Å–∞ –æ–∑–≤—É—á–∫–∏']
]
reply_markup = ReplyKeyboardMarkup(role_keyboard, one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç."""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Å—Ç–∏–Ω–≥-—Å—Ç—É–¥–∏—é Aniframe! üéôÔ∏è\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–∞—Å—Ç–∏–Ω–≥–µ.\n\n"
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ä–æ–ª–∏."""
    context.user_data['age'] = update.message.text
    await update.message.reply_text(
        "–ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏?",
        reply_markup=reply_markup
    )
    return ROLE

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    role = update.message.text
    context.user_data['role'] = role
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º
    if role in ['–ü–µ—Ä–µ–≤–æ–¥ —è–ø–æ–Ω', '–ü–µ—Ä–µ–≤–æ–¥ –∞–Ω–≥–ª']:
        context.user_data['work_samples'] = '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫)'
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ t.me/username)\n\n"
            "–ï—Å–ª–∏ –≤—ã –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return TG_LINK
    else:
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ - –æ–Ω–∏ –≤—Å–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        return WORK_SAMPLES

async def work_samples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç."""
    if 'work_samples' not in context.user_data:
        context.user_data['work_samples'] = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        context.user_data['work_samples'].append({'type': 'photo', 'file_id': file_id})
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    elif update.message.video:
        file_id = update.message.video.file_id
        context.user_data['work_samples'].append({'type': 'video', 'file_id': file_id})
        await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    elif update.message.audio:
        file_id = update.message.audio.file_id
        context.user_data['work_samples'].append({'type': 'audio', 'file_id': file_id})
        await update.message.reply_text("‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    elif update.message.document:
        file_id = update.message.document.file_id
        context.user_data['work_samples'].append({'type': 'document', 'file_id': file_id})
        await update.message.reply_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    elif update.message.voice:
        file_id = update.message.voice.file_id
        context.user_data['work_samples'].append({'type': 'voice', 'file_id': file_id})
        await update.message.reply_text("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    
    return WORK_SAMPLES

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–±–æ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Telegram."""
    if 'work_samples' not in context.user_data or not context.user_data['work_samples']:
        await update.message.reply_text("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        return WORK_SAMPLES
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ t.me/username)\n\n"
        "–ï—Å–ª–∏ –≤—ã –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=ReplyKeyboardRemove()
    )
    return TG_LINK

async def tg_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    context.user_data['tg_link'] = update.message.text
    user = update.message.from_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application_text = (
        "üé¨ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í ANIFRAME* üé¨\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name} {user.last_name or ''} (@{user.username or '–Ω–µ—Ç'})\n"
        f"üîû *–í–æ–∑—Ä–∞—Å—Ç:* {context.user_data['age']}\n"
        f"üé≠ *–†–æ–ª—å:* {context.user_data['role']}\n"
        f"üìé *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç:* {len(context.user_data.get('work_samples', []))}\n"
        f"üìû *Telegram:* {context.user_data['tg_link']}\n"
        f"üÜî *User ID:* {user.id}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=application_text,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'work_samples' in context.user_data and isinstance(context.user_data['work_samples'], list):
            for work in context.user_data['work_samples']:
                try:
                    if work['type'] == 'photo':
                        await context.bot.send_photo(ADMIN_CHAT_ID, work['file_id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                    elif work['type'] == 'video':
                        await context.bot.send_video(ADMIN_CHAT_ID, work['file_id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                    elif work['type'] == 'audio':
                        await context.bot.send_audio(ADMIN_CHAT_ID, work['file_id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                    elif work['type'] == 'document':
                        await context.bot.send_document(ADMIN_CHAT_ID, work['file_id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                    elif work['type'] == 'voice':
                        await context.bot.send_voice(ADMIN_CHAT_ID, work['file_id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã: {e}")
                    continue
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏! –ï—Å–ª–∏ –≤—ã –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç–µ, "
            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π.\n\n"
            "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üçÄ"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    await update.message.reply_text(
        "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ /start —Å–Ω–æ–≤–∞!",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        print("–ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê' –≤ —Ñ–∞–π–ª–µ bot.py –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return
    
    if ADMIN_CHAT_ID == "–í–ê–®_TELEGRAM_ID":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_CHAT_ID!")
        print("–ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_TELEGRAM_ID' –≤ —Ñ–∞–π–ª–µ bot.py –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID")
        return
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            ROLE: [MessageHandler(filters.Regex('^(–ü–µ—Ä–µ–≤–æ–¥ —è–ø–æ–Ω|–ü–µ—Ä–µ–≤–æ–¥ –∞–Ω–≥–ª|–ú–æ–Ω—Ç–∞–∂–µ—Ä|–ó–≤—É–∫–æ–º–æ–Ω—Ç–∞–∂–µ—Ä|–ê–∫—Ç—ë—Ä –æ–∑–≤—É—á–∫–∏|–ê–∫—Ç—Ä–∏—Å–∞ –æ–∑–≤—É—á–∫–∏)$'), role)],
            WORK_SAMPLES: [
                MessageHandler(filters.PHOTO | filters.VIDEO | filters.AUDIO | filters.DOCUMENT | filters.VOICE, work_samples),
                CommandHandler('done', done)
            ],
            TG_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, tg_link)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç Aniframe –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_CHAT_ID}")
    application.run_polling()

if __name__ == '__main__':
    main()
